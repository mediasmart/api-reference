# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - http # Remove if your API doesn't support HTTP
  - https # Remove if your API donsn't support HTTPS
host: api.mediasmart.io # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: / # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is the **API reference** for [mediasmart.io](https://mediasmart.io), directly used by
    [our web application client](https://console.mediasmart.io) but also open to the world. So using our API
    you'll be able to do most things you can do by mean of the web interface.

    # Introduction
    This reference describes how to use Mediasmart API. It is private, so first of all you'll need to
    [register an account](http://mediasmart.io/pricing/?utm_source=mediasmart&utm_campaign=api-reference) in case
    you don't have one yet.

    Contact us for any doubt or suggestion: [support@mediasmart.io](mailto://support@mediasmart.io)

  version: '1.4.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Mediasmart API # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.

  termsOfService: 'http://mediasmart.io/terms-of-use/' # [Optional] Replace with an URL to your ToS
  contact:
    email: support@mediasmart.io # [Optional] Replace with your contact email
    url: 'http://mediasmart.io/contact/' # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'http://mediasmart.io/assets/images/logo-banner.jpg'
externalDocs:
  description: Be smart about your media buying on mobile
  url: 'http://mediasmart.io/'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  - text/plain
  - text/csv
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  - multipart/form-data
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: analytics
    description: Performance and spending reports
  - name: User
    description: Operations about user
  - name: public
    description: Public operations. Authentication is not required.
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  auth_token: # security definition name (you can name it as you want)
    description: Most of our API endpoints are private. Authentication is performed by mean of a token included in your
      `authorization` header. That token has to be generated by mean of a `[POST] /login` call.
    type: apiKey # authorization type, one of: oauth2, basic, apiKey
    in: header
    name: authorization

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:
  '/status':
    get:
      tags:
        - public
      summary: Check API servers status
      description: This endpoint is usefull to check servers status. If a success response is returned it means our API is up and working well.
      produces:
        - application/json
      responses:
        '200':
          description: Success. All servers are working well
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Status'
        '429':
          description: Quota exceeded
          examples:
            application/json:
              message: You've exceeded your requests per minute quota
  '/login':
    post:
      tags:
        - public
      summary: Login to get a token
      description: Performs a login to retrieve a session including an authorization token. That token can be used as `authorization` header for later requests.
      consumes:
        - application/json
      parameters:
        - name: credentials
          in: body
          description: User credentials
          required: true
          schema:
            type: object
            properties:
              username:
                description: Username or email
                type: string
                minLength: 1
                example: thisismyusername
              password:
                description: Password
                type: string
                minLength: 1
                example: thisismypassword
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Session'
        '400':
          description: Wrong request
          examples:
            application/json:
              message: Wrong request
        '401':
          description: Not authorized
          examples:
            application/json:
              message: Wrong credentials
        '429':
          description: Quota exceeded
          examples:
            application/json:
              message: You've exceeded your requests per minute quota

  '/api/dictionary':
    get:
      summary: Dictionary
      description: Retrieves the main dictionary, including all values for everything in our platform. From available
        campaign states to existing user roles.
      parameters:
        - name: authorization
          in: header
          description: Authorization token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Dictionary'
        '400':
          description: Wrong request
          examples:
            application/json:
              message: Wrong request
        '401':
          description: Not authorized
          examples:
            application/json:
              message: Authentication required. Token not provided.
        '403':
          description: Forbidden action
          examples:
            application/json:
              message: Authentication required. Invalid or expired token provided.
        '429':
          description: Quota exceeded
          examples:
            application/json:
              message: You've exceeded your requests per minute quota

  '/api/analytics/custom-report':
    get:
      tags:
        - analytics
      summary: Custom report
      description: Computes a customized report, specifying drilldown variables, kpis and dates range.
      parameters:
        - name: authorization
          in: header
          description: Authorization token
          required: true
          type: string
        - name: from
          in: query
          description: Start date
          type: string
          format: YYYY-MM-DD
        - name: to
          in: query
          description: End date
          type: string
          format: YYYY-MM-DD
        - name: drilldown
          in: query
          type: string
          format: one,other,another
          description: Drilldown variables (comma separated)
        - name: kpis
          in: query
          type: string
          format: one,other,another
          description: KPIs (comma separated)
        - name: format
          in: query
          type: string
          format: json|csv|excel
          description: Output file format
        - name: raw
          in: query
          type: boolean
          format: true|false
          description: Active to avoid numbers rounding
        - name: rules
          in: query
          type: string
          format: variable1=[value1,value2];variable2!=[value3]
          description: Rules separated by semicolon.
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Report'
        '400':
          description: Wrong request
          examples:
            application/json:
              message: Wrong request
        '401':
          description: Not authorized
          examples:
            application/json:
              message: Authentication required. Token not provided.
        '403':
          description: Forbidden action
          examples:
            application/json:
              message: Authentication required. Invalid or expired token provided.
        '429':
          description: Quota exceeded
          examples:
            application/json:
              message: You've exceeded your requests per minute quota

  # '/users/{username}': # path parameter in curly braces
  #   # documentation for GET operation for this path

  #   # parameters list that are used with each operation for this path
  #   parameters:
  #     - name: pretty_print
  #       in: query # place where paramter is passed: path, header, query or body, formData
  #       description: Pretty print response
  #       # type of the paramter: string, number, integer, boolean, array
  #       type: boolean
  #   get:
  #     tags:
  #       - User

  #     # summary is up to 120 symbold but we recommend to be shortest as possible
  #     summary: Get user by user name

  #     # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
  #     description: |
  #       Some description of the operation.
  #       You can use `markdown` here.

  #     # operationId should be unique across the whole specification
  #     operationId: getUserByName

  #     # list of parameters for the operation
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched'
  #         required: true
  #         type: string
  #       - name: with_email
  #         in: query
  #         description: Filter users without email
  #         type: boolean

  #     # security schemas applied to this operation
  #     security:
  #       - auth_token: []
  #     # overwriting default global produces
  #     produces:
  #       - application/json
  #     responses: # list of responses
  #       '200':
  #         description: Success
  #         schema: # response schema can be specified for each response
  #           $ref: '#/definitions/User'
  #         examples:
  #         # repsonse samples for each type operation produces
  #           application/json:
  #             username: user1
  #             email: user@example.com
  #       '403':
  #         description: Forbidden
  #       '404':
  #         description: User not found
  #   # documentation for PUT operation for this path
  #   put:
  #     tags:
  #       - User
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     produces:
  #       - application/json
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be updated
  #         required: true
  #         type: string
  #       - in: body
  #         name: body
  #         description: Updated user object
  #         required: true
  #         # for body parameter you should specify request schema instead of type
  #         schema:
  #           $ref: '#/definitions/User'
  #     security:
  #       - auth_token: []
  #     responses:
  #       '200':
  #         description: OK
  #       '400':
  #         description: Invalid user supplied
  #       '404':
  #         description: User not found

  # '/echo':
  #   post:
  #     tags:
  #       - Echo
  #     summary: Echo test
  #     description: Receive the exact message you've sent
  #     operationId: echo
  #     parameters:
  #       - name: message
  #         in: body
  #         description: 'Echo payload'
  #         required: true
  #         schema:
  #           type: string
  #           example: 'Hello world!'
  #     security:
  #       - auth_token: []
  #     responses:
  #       '200':
  #         description: 'OK'
  #         examples:
  #           'application/json': 'Hello world!'
  #         schema:
  #           type: string
  #         # docuemnt headers for this repsonse
  #         headers:
  #           X-Rate-Limit: # Header name
  #             type: integer # Header value type
  #             format: int32 # Header value format
  #             description: calls per hour allowed by the user
  #           X-Expires-After:
  #             type: string
  #             format: date-time
  #             description: date in UTC when token expires
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  Dictionary:
    type: object
    example:
      countries:
        ESP: Spain
        FRA: France
        PRT: Portugal
        ...: ...
      drilldown:
        campaign: Campaign
        exchange: Ad Exchange
        os: Operating system
        ...: ...
      kpis:
        offers: Bid offers
        bids: Bids
        impressions: Impressions
        clicks: Clicks
        ...: ...
      ...: ...
  Report:
    type: object
    example:
      - day: '2017-08-01'
        impressions: 12304
        clicks: 2349
        events1: 44
      - day: '2017-08-02'
        impressions: 40004
        clicks: 5049
        events1: 20
      - ...: ...
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com
  User:
    type: object
    properties:
      id:
        $ref: '#/definitions/Identifier'
      token:
        description: Authorization token
        type: string
        minLength: 32
        maxLength: 32
        example: padyfwu23fkt6abxf3lfl5ao43sjxden
      username:
        description: User username
        type: string
        minLength: 1
        example: anexampleuser
      name:
        $ref: '#/definitions/Name'
      email:
        $ref: '#/definitions/Email'
      image:
        $ref: '#/definitions/Image'
      role:
        description: User role
        type: string
        minLength: 1
        example: 'editor'
  Identifier:
    description: Unique identifier
    type: string
    minLength: 16
    maxLength: 32
    example: eeeefwu98fkt6abxuytfl5ao43sjx767
  Image:
    description: Image URL
    type: string
    format: url
    example: http://d2wt9ed5gia51z.cloudfront.net/xxxxxxxxxxxxxxxx
  Name:
    description: A name for humans
    type: string
    example: This Is Just a Name
  State:
    description: State in the platform
    type: string
    example: active
  Organization:
    type: object
    properties:
      id:
        $ref: '#/definitions/Identifier'
      name:
        $ref: '#/definitions/Name'
      image:
        $ref: '#/definitions/Image'
      state:
        $ref: '#/definitions/State'
  Session:
    allOf:
      - $ref: '#/definitions/User'
      - type: object
        description: Authenticated session
        properties:
          organization:
            $ref: '#/definitions/Organization'
          users:
            type: array
            items:
              $ref: '#/definitions/User'
  Status:
    type: object
    properties:
      version:
        description: API gateway version
        type: string
        minLength: 5
        example: 1.3.17
      status:
        description: Global status
        type: string
        minLength: 1
        example: All servers are OK
